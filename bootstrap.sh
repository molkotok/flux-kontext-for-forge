#!/usr/bin/env bash
set -euo pipefail

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        CYGWIN*|MINGW32*|MSYS*|MINGW*) echo "windows";;
        *)          echo "unknown";;
    esac
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_missing_dependencies() {
    local os_type=$(detect_os)
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    local deps=("curl" "git" "sha256sum")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è jq (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
    if ! command -v jq &>/dev/null; then
        missing_deps+=("jq")
    fi
    
    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo "‚úÖ All dependencies are available"
        return 0
    fi
    
    echo "üì¶ Installing missing dependencies: ${missing_deps[*]}"
    
    case "$os_type" in
        "linux")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux
            if command -v apt-get &>/dev/null; then
                echo "üêß Installing dependencies using apt-get..."
                for dep in "${missing_deps[@]}"; do
                    case "$dep" in
                        "sha256sum") sudo apt-get update && sudo apt-get install -y coreutils;;
                        *) sudo apt-get update && sudo apt-get install -y "$dep";;
                    esac
                done
            elif command -v yum &>/dev/null; then
                echo "üêß Installing dependencies using yum..."
                for dep in "${missing_deps[@]}"; do
                    case "$dep" in
                        "sha256sum") sudo yum install -y coreutils;;
                        *) sudo yum install -y "$dep";;
                    esac
                done
            elif command -v pacman &>/dev/null; then
                echo "üêß Installing dependencies using pacman..."
                for dep in "${missing_deps[@]}"; do
                    case "$dep" in
                        "sha256sum") sudo pacman -S --noconfirm coreutils;;
                        *) sudo pacman -S --noconfirm "$dep";;
                    esac
                done
            else
                echo "‚ùå Unsupported Linux distribution. Please install manually: ${missing_deps[*]}"
                return 1
            fi
            ;;
        "macos")
            echo "üçé Installing dependencies using brew..."
            if ! command -v brew &>/dev/null; then
                echo "üì¶ Installing Homebrew first..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            for dep in "${missing_deps[@]}"; do
                case "$dep" in
                    "sha256sum") brew install coreutils;;
                    *) brew install "$dep";;
                esac
            done
            ;;
        "windows")
            echo "ü™ü Installing dependencies for Windows..."
            
            # –î–ª—è Windows –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            for dep in "${missing_deps[@]}"; do
                case "$dep" in
                    "jq")
                        echo "  Installing jq..."
                        if command -v winget &>/dev/null; then
                            winget install jqlang.jq
                        elif command -v choco &>/dev/null; then
                            choco install jq -y
                        elif command -v scoop &>/dev/null; then
                            scoop install jq
                        else
                            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–Ω–∞—Ä–Ω–∏–∫ jq
                            echo "  Downloading jq binary..."
                            local jq_url="https://github.com/jqlang/jq/releases/latest/download/jq-windows-amd64.exe"
                            local jq_path="/usr/local/bin/jq.exe"
                            mkdir -p "$(dirname "$jq_path")"
                            if curl -L -o "$jq_path" "$jq_url" 2>/dev/null; then
                                chmod +x "$jq_path"
                                echo "  ‚úÖ jq installed to $jq_path"
                            else
                                echo "  ‚ùå Failed to download jq. Please install manually."
                                echo "  Download from: https://jqlang.github.io/jq/download/"
                                return 1
                            fi
                        fi
                        ;;
                    "curl"|"git"|"sha256sum")
                        echo "  ‚ùå $dep is required but not found."
                        echo "  Please install Git for Windows: https://git-scm.com/download/win"
                        return 1
                        ;;
                esac
            done
            ;;
        *)
            echo "‚ùå Unsupported operating system. Please install manually: ${missing_deps[*]}"
            return 1
            ;;
    esac
    
    echo "‚úÖ Dependencies installed successfully"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è assets.json
if [ ! -f "assets.json" ]; then
    echo "‚ùå assets.json not found"
    exit 1
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_missing_dependencies

# –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ Forge
if [ -z "${FORGE_HOME:-}" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
  if [ -f "./webui.sh" ] || [ -f "./launch.py" ]; then
    FORGE_HOME=$(pwd)
    echo "‚úÖ Detected Forge location: $FORGE_HOME"
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É (—á–∞—Å—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏)
  elif [ -f "../webui.sh" ] || [ -f "../launch.py" ] || [ -f "../webui-user.bat" ] || [ -f "../webui-user.sh" ]; then
    FORGE_HOME=$(cd .. && pwd)
    echo "‚úÖ Detected Forge location: $FORGE_HOME"
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ (–¥–ª—è –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫)
  elif [ -f "../../webui.sh" ] || [ -f "../../launch.py" ] || [ -f "../../webui-user.bat" ] || [ -f "../../webui-user.sh" ]; then
    FORGE_HOME=$(cd ../.. && pwd)
    echo "‚úÖ Detected Forge location: $FORGE_HOME"
  else
    FORGE_HOME="$HOME/stable-diffusion-webui-forge"
    echo "‚ö†Ô∏è Using default path: $FORGE_HOME"
    echo "üí° If this is wrong, set FORGE_HOME manually:"
    echo "    FORGE_HOME='/path/to/your/forge' bash bootstrap.sh"
  fi
fi

if [ ! -d "$FORGE_HOME" ]; then
  echo "‚ùå Forge not found at $FORGE_HOME"
  exit 1
fi

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ gdown, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è GDrive
need_gdown() { 
    [ -f "assets.json" ] && grep -q '"gdrive://' assets.json; 
}

if need_gdown && ! command -v gdown &>/dev/null; then
    echo "üì¶ Installing gdown for Google Drive support..."
    python -m pip install --user --upgrade gdown
fi

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
expand_path() {
    local path="$1"
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    path="${path//\$FORGE_HOME/$FORGE_HOME}"
    path="${path//\$HOME/$HOME}"
    echo "$path"
}

download() {
    local url="$1" dst="$2" sum="$3"
    mkdir -p "$dst"
    local fname="$dst/$(basename "$url")"

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if [ -f "$fname" ] && sha256sum -c <<<"$sum  $fname" 2>/dev/null; then
        echo "‚úî $(basename "$fname") already OK"
        return 0
    fi

    echo "‚Üì Downloading $(basename "$fname") ..."
    case "$url" in
      gdrive://*)
          # gdown —É–º–µ–µ—Ç —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ -c
          if ! gdown -c --no-cookies "${url#gdrive://}" -O "$fname"; then
              echo "‚ùå Failed to download from Google Drive: $url"
              return 1
          fi
          ;;
      http*|https*)
          # curl —Å timeout –∏ –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          if ! curl -L --connect-timeout 30 --max-time 3600 --retry 3 --retry-delay 5 --continue-at - -o "$fname" "$url"; then
              echo "‚ùå Failed to download: $url"
              return 1
          fi
          ;;
      *)
          echo "‚ùå Unsupported URL format: $url"
          return 1
          ;;
    esac

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if ! sha256sum -c <<<"$sum  $fname" 2>/dev/null; then
        echo "‚ùå Checksum failed for $(basename "$fname")"
        echo "Expected: $sum"
        echo "Got: $(sha256sum "$fname" | cut -d' ' -f1)"
        return 1
    fi
}

clone_or_update() {
    local giturl="$1" tgt="$2"
    
    if [ -d "$tgt/.git" ]; then
        echo "üîÑ Updating repository: $(basename "$tgt")"
        if ! git -C "$tgt" pull --ff-only; then
            echo "‚ùå Failed to update repository: $tgt"
            return 1
        fi
    else
        echo "üì• Cloning repository: $(basename "$tgt")"
        if ! git clone --depth 1 "$giturl" "$tgt"; then
            echo "‚ùå Failed to clone repository: $giturl"
            return 1
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
failed_count=0
total_count=0

while IFS= read -r entry; do
    total_count=$((total_count + 1))
    
    url=$(jq -r '.url? // empty' <<<"$entry")
    giturl=$(jq -r '.git? // empty' <<<"$entry")
    target_raw=$(jq -r '.target' <<<"$entry")
    tgt=$(expand_path "$target_raw")
    
    if [ -n "$url" ]; then
        sha256=$(jq -r '.sha256' <<<"$entry")
        if [ "$sha256" = "null" ] || [ -z "$sha256" ]; then
            echo "‚ùå Missing sha256 for URL: $url"
            failed_count=$((failed_count + 1))
            continue
        fi
        
        if ! download "$url" "$tgt" "$sha256"; then
            failed_count=$((failed_count + 1))
        fi
    elif [ -n "$giturl" ]; then
        if ! clone_or_update "$giturl" "$tgt"; then
            failed_count=$((failed_count + 1))
        fi
    else
        echo "‚ùå Invalid entry: no URL or git repository specified"
        failed_count=$((failed_count + 1))
    fi
done < <(jq -c '.[]' assets.json)

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
if [ $failed_count -eq 0 ]; then
    echo "‚úÖ Forge bootstrap complete! All $total_count items processed successfully."
else
    echo "‚ö†Ô∏è Bootstrap completed with $failed_count failures out of $total_count items."
    exit 1
fi
