#!/usr/bin/env bash
set -euo pipefail

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
check_dependencies() {
    local deps=("jq" "curl" "git" "sha256sum")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo "‚ùå Required dependency '$dep' not found"
            exit 1
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è assets.json
if [ ! -f "assets.json" ]; then
    echo "‚ùå assets.json not found"
    exit 1
fi

check_dependencies

# –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ Forge
if [ -z "${FORGE_HOME:-}" ]; then
  if [ -f "./webui.sh" ] || [ -f "./launch.py" ]; then
    FORGE_HOME=$(pwd)
    echo "‚úÖ Detected Forge location: $FORGE_HOME"
  else
    FORGE_HOME="$HOME/stable-diffusion-webui-forge"
    echo "‚ö†Ô∏è Using default path: $FORGE_HOME"
  fi
fi

if [ ! -d "$FORGE_HOME" ]; then
  echo "‚ùå Forge not found at $FORGE_HOME"
  exit 1
fi

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ gdown, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è GDrive
need_gdown() { 
    [ -f "assets.json" ] && grep -q '"gdrive://' assets.json; 
}

if need_gdown && ! command -v gdown &>/dev/null; then
    echo "üì¶ Installing gdown for Google Drive support..."
    python -m pip install --user --upgrade gdown
fi

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
expand_path() {
    local path="$1"
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    path="${path//\$FORGE_HOME/$FORGE_HOME}"
    path="${path//\$HOME/$HOME}"
    echo "$path"
}

download() {
    local url="$1" dst="$2" sum="$3"
    mkdir -p "$dst"
    local fname="$dst/$(basename "$url")"

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if [ -f "$fname" ] && sha256sum -c <<<"$sum  $fname" 2>/dev/null; then
        echo "‚úî $(basename "$fname") already OK"
        return 0
    fi

    echo "‚Üì Downloading $(basename "$fname") ..."
    case "$url" in
      gdrive://*)
          # gdown —É–º–µ–µ—Ç —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ -c
          if ! gdown -c --no-cookies "${url#gdrive://}" -O "$fname"; then
              echo "‚ùå Failed to download from Google Drive: $url"
              return 1
          fi
          ;;
      http*|https*)
          # curl —Å timeout –∏ –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          if ! curl -L --connect-timeout 30 --max-time 3600 --retry 3 --retry-delay 5 --continue-at - -o "$fname" "$url"; then
              echo "‚ùå Failed to download: $url"
              return 1
          fi
          ;;
      *)
          echo "‚ùå Unsupported URL format: $url"
          return 1
          ;;
    esac

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if ! sha256sum -c <<<"$sum  $fname" 2>/dev/null; then
        echo "‚ùå Checksum failed for $(basename "$fname")"
        echo "Expected: $sum"
        echo "Got: $(sha256sum "$fname" | cut -d' ' -f1)"
        return 1
    fi
}

clone_or_update() {
    local giturl="$1" tgt="$2"
    
    if [ -d "$tgt/.git" ]; then
        echo "üîÑ Updating repository: $(basename "$tgt")"
        if ! git -C "$tgt" pull --ff-only; then
            echo "‚ùå Failed to update repository: $tgt"
            return 1
        fi
    else
        echo "üì• Cloning repository: $(basename "$tgt")"
        if ! git clone --depth 1 "$giturl" "$tgt"; then
            echo "‚ùå Failed to clone repository: $giturl"
            return 1
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
failed_count=0
total_count=0

while IFS= read -r entry; do
    total_count=$((total_count + 1))
    
    url=$(jq -r '.url? // empty' <<<"$entry")
    giturl=$(jq -r '.git? // empty' <<<"$entry")
    target_raw=$(jq -r '.target' <<<"$entry")
    tgt=$(expand_path "$target_raw")
    
    if [ -n "$url" ]; then
        sha256=$(jq -r '.sha256' <<<"$entry")
        if [ "$sha256" = "null" ] || [ -z "$sha256" ]; then
            echo "‚ùå Missing sha256 for URL: $url"
            failed_count=$((failed_count + 1))
            continue
        fi
        
        if ! download "$url" "$tgt" "$sha256"; then
            failed_count=$((failed_count + 1))
        fi
    elif [ -n "$giturl" ]; then
        if ! clone_or_update "$giturl" "$tgt"; then
            failed_count=$((failed_count + 1))
        fi
    else
        echo "‚ùå Invalid entry: no URL or git repository specified"
        failed_count=$((failed_count + 1))
    fi
done < <(jq -c '.[]' assets.json)

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
if [ $failed_count -eq 0 ]; then
    echo "‚úÖ Forge bootstrap complete! All $total_count items processed successfully."
else
    echo "‚ö†Ô∏è Bootstrap completed with $failed_count failures out of $total_count items."
    exit 1
fi
